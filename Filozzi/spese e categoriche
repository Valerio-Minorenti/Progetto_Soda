# New feature - Group
train['Group'] = train['PassengerId'].apply(lambda x: x.split('_')[0]).astype(int)
test['Group'] = test['PassengerId'].apply(lambda x: x.split('_')[0]).astype(int)

# New feature - Group size
train['Group_size']=train['Group'].map(lambda x: pd.concat([train['Group'], test['Group']]).value_counts()[x])
test['Group_size']=test['Group'].map(lambda x: pd.concat([train['Group'], test['Group']]).value_counts()[x])

# Plot distribution of new features
plt.figure(figsize=(20,4))
plt.subplot(1,2,1)
sns.histplot(data=train, x='Group', hue='Transported', binwidth=1)
plt.title('Group')

plt.subplot(1,2,2)
sns.countplot(data=train, x='Group_size', hue='Transported')
plt.title('Group size')
fig.tight_layout()

# New feature
train['Solo']=(train['Group_size']==1).astype(int)
test['Solo']=(test['Group_size']==1).astype(int)

# New feature distribution
plt.figure(figsize=(10,4))
sns.countplot(data=train, x='Solo', hue='Transported')
plt.title('Passenger travelling solo or not')
plt.ylim([0,3000])



# Expenditure features
exp_feats=['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']

# Plot expenditure features
fig=plt.figure(figsize=(10,20))
for i, var_name in enumerate(exp_feats):
    # Left plot
    ax=fig.add_subplot(5,2,2*i+1)
    sns.histplot(data=train, x=var_name, axes=ax, bins=30, kde=False, hue='Transported')
    ax.set_title(var_name)
    
    # Right plot (truncated)
    ax=fig.add_subplot(5,2,2*i+2)
    sns.histplot(data=train, x=var_name, axes=ax, bins=30, kde=True, hue='Transported')
    plt.ylim([0,100])
    ax.set_title(var_name)
fig.tight_layout()  # Improves appearance a bit
plt.show()

data['Expendures'] = data[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].sum(axis=1, skipna = True)

# Crea la colonna booleana: 1 se ha speso 0, 0 altrimenti
data['NoSpending'] = (data['Expendures'] == 0).astype(int)


# Calcolo della mediana
x1 =(data['Expendures']).median()
print(x1)

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Expendures', bins=30, kde=False, hue='Transported')
plt.title('Distribuzione delle spese totali (Expendures)')
plt.xlabel('Expendures')
plt.ylabel('Numero di passeggeri')
plt.show()

# Calcolo della mediana
expendures_median = data['Expendures'].median()

# Filtro per Expendures < mediana
filtered_data = data[data['Expendures'] <= expendures_median]
x2 = data [data['Expendures'] > expendures_median]

# Conta quanti sono Transported = True e False
transported_counts1 = filtered_data['Transported'].value_counts()
transported_counts2 = x2['Transported'].value_counts()

# Stampa i conteggi
print("Conto di 'Transported' per passeggeri con Expendures < mediana:")
print(transported_counts1, transported_counts2 )

# Creazione della feature binaria
data['Expendures'] = (data['Expendures'] > expendures_median)


# Categorical features
cat_feats=['HomePlanet', 'CryoSleep', 'Destination', 'VIP', 'Expendures', 'NoSpending']

# Plot categorical features
fig=plt.figure(figsize=(10,16))
for i, var_name in enumerate(cat_feats):
    ax=fig.add_subplot(5,1,i+1)
    sns.countplot(data=data, x=var_name, axes=ax, hue='Transported')
    ax.set_title(var_name)
fig.tight_layout()  # Improves appearance a bit
plt.show()

# Figure size
plt.figure(figsize=(10,4))

# Histogram
sns.histplot(data=train, x='Age', hue='Transported', binwidth=1, kde=True)

# Aesthetics
plt.title('Age distribution')
plt.xlabel('Age (years)')
